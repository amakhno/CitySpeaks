// <auto-generated />
using System;
using CitySpeaks.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CitySpeaks.Infrastructure.Migrations
{
    [DbContext(typeof(CitySpeaksContext))]
    [Migration("20190301191127_workers-image")]
    partial class workersimage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CitySpeaks.Domain.Models.CustomPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BigImageData");

                    b.Property<string>("BigImageMimeType");

                    b.Property<bool>("IsShow");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Page")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CustomPages");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .IsRequired();

                    b.Property<string>("ImageMimeType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.MainPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("LogoImageMimeType");

                    b.Property<byte[]>("LogolImageData");

                    b.Property<byte[]>("MainImageData");

                    b.Property<string>("MainImageMimeType");

                    b.Property<string>("Subtitle")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MainPages");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BigImageData");

                    b.Property<string>("BigImageMimeType");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("FullDescription")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.Property<byte[]>("SmallImageData");

                    b.Property<string>("SmallImageMimeType");

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BigImageData");

                    b.Property<string>("BigImageMimeType");

                    b.Property<int>("CategoryId");

                    b.Property<string>("FullDescription")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.Property<byte[]>("SmallImageData");

                    b.Property<string>("SmallImageMimeType");

                    b.HasKey("ProgramId")
                        .HasName("PK_dbo.Programs");

                    b.HasIndex("CategoryId")
                        .HasName("IX_CategoryId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.ProgramCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CategoryId")
                        .HasName("PK_dbo.ProgramCategories");

                    b.ToTable("ProgramCategories");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("RoleId");

                    b.HasKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BigImageId");

                    b.Property<string>("FullDescription");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.Property<int?>("SmallImageId");

                    b.HasKey("Id");

                    b.HasIndex("BigImageId")
                        .IsUnique()
                        .HasFilter("[BigImageId] IS NOT NULL");

                    b.HasIndex("SmallImageId")
                        .IsUnique()
                        .HasFilter("[SmallImageId] IS NOT NULL");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Program", b =>
                {
                    b.HasOne("CitySpeaks.Domain.Models.ProgramCategory", "Category")
                        .WithMany("Programs")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_dbo.Programs_dbo.ProgramCategories_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Review", b =>
                {
                    b.HasOne("CitySpeaks.Domain.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("CitySpeaks.Domain.Models.Review", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.User", b =>
                {
                    b.HasOne("CitySpeaks.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitySpeaks.Domain.Models.Worker", b =>
                {
                    b.HasOne("CitySpeaks.Domain.Models.Image", "BigImage")
                        .WithOne()
                        .HasForeignKey("CitySpeaks.Domain.Models.Worker", "BigImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CitySpeaks.Domain.Models.Image", "SmallImage")
                        .WithOne()
                        .HasForeignKey("CitySpeaks.Domain.Models.Worker", "SmallImageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
